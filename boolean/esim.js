//perus
let jokuEiJooArvo = true;

if(jokuEiJooArvo)
    console.log("totta");

jokuEiJooArvo = false;

if(!jokuEiJooArvo) // ! on NOT
    console.log("ei oo totta");

//esimerkki
/*  voit k√§ytt√§√§ includes() sijaan my√∂s:    let pattern = /√§/;
                                            tutkittavaTeksti.indexOf("√§"), 
                                            pattern.test(tutkittavaTeksti) (RegEx), 
                                            tutkittavaTeksti.match(/√§/) 
                                            includes toimii parhaiten boolean esimerkkiin,
                                            koska se palauttaa true tai false 
                                            lis√§√§ muista tavoista https://github.com/GetSomefi/Kurssi_Javascript/tree/main/haeTeksti(RegEx)*/
const tutkittavaTeksti = "Onkohan t√§ss√§ mit√§√§n j√§rke√§";     //tutkittava teksti
const sisaltaako = tutkittavaTeksti.includes("√§");          //tarkistetaan sis√§lt√§√§k√∂ muuttujan teksti tietyn kirjaimen (√§)

let vastaus = "Ei sis√§ll√§";
if(sisaltaako){
    vastaus = "Sis√§lt√§√§";
} 
//else{ vastaus = "Ei sis√§ll√§";  } // <- tarpeeton, mutta ok
console.log("Sis√§lt√§√§k√∂: " + vastaus);

//onko olemassa
//https://exploringjs.com/js/book/ch_booleans.html#tbl:converting_to_boolean
console.log("------");
console.log("Muunto booleaniksi Boolean() funktiolla");
let muuttuja;
console.log("let muuttuja; -> " + Boolean(muuttuja)); //false

muuttuja = undefined;
console.log("muuttuja = undefined; -> " + Boolean(muuttuja)); //false

muuttuja = null;
console.log("muuttuja = null; -> " + Boolean(muuttuja)); // false

muuttuja = NaN;
console.log("muuttuja = Nan; -> " + Boolean(muuttuja)); // false

muuttuja = ""; // vain tyhj√§ string tuottaa falsen, muut tuottavat true
console.log("muuttuja = \"\"; -> " + Boolean(muuttuja)); //false

muuttuja = ''; // vain tyhj√§ string tuottaa falsen, muut tuottavat true
console.log("muuttuja = \'\'; -> " + Boolean(muuttuja)); //false

muuttuja = 'false'; //jopa "false" tai 'false' on true ü§®
console.log("muuttuja = \'false\'; -> " + Boolean(muuttuja)); // true

muuttuja = 0;
console.log("muuttuja = 0; -> " + Boolean(muuttuja)); //false

muuttuja = 1;
console.log("muuttuja = 1; -> " + Boolean(muuttuja)); // true

muuttuja = -1;
console.log("muuttuja = -1; -> " + Boolean(muuttuja)); // true

muuttuja = {}; //objekti
console.log("muuttuja = {}; -> " + Boolean(muuttuja)); // true

muuttuja = []; //array
console.log("muuttuja = []; -> " + Boolean(muuttuja)); // true

muuttuja = Symbol("jokuAvain");
console.log("muuttuja = Symbol(\"jokuAvain\"); -> " + Boolean(muuttuja)); // true


//truthiness check
//https://exploringjs.com/js/book/ch_booleans.html#truthiness-existence-checks

//Alla oleva on hyv√§ esimerkki jonkin asian "onko olemassa" -tarkastuksesta.
//if (obj.prop)
//jos objekti sis√§lt√§√§ kyseisen propertyn vastauksena on true -> truthy
//jos objekti ei sis√§ll√§ kyseist√§ property√§ vastaus on false -> falsy (eli menee else haaraan jos sellainen on)

const obj = {};
if (obj.prop !== undefined) {
    // obj has property .prop
    console.log( "prop-property on olemassa", Boolean(obj.prop) );
}else{
    console.log( "prop-property√§ ei ole olemassa", Boolean(obj.prop) );
}

//Due to undefined being falsy, we can shorten this check to:
if (obj.prop) {
    // obj has property .prop
    console.log( "prop-property on olemassa", Boolean(obj.prop) );
}else{
    console.log( "prop-property√§ ei ole olemassa", Boolean(obj.prop) );
}

//HUOM HUOM (kaataa ohjelman ilman try:t√§)
//Esimerkki try catch:ist√§ https://github.com/GetSomefi/Kurssi_Javascript/tree/main/tryCathFinally
//Alla yritet√§√§n tarkastaa sis√§lt√§√§k√∂ obj2 prop-propertyn
//t√§m√§ vertailu antaa virheen ja kaataisi ohjelman, sill√§ let obj2; on m√§√§ritt√§m√§tt√§ (undefined).
//... ja jos jotain ei ole m√§√§ritetty sen j√§seni√§k√§√§n ei voida tarkastella 
let obj2;
console.log( typeof obj2 ); // tulostaa undefined
try{
    if (obj2.prop) {
        // obj has property .prop
        console.log( "prop-property on olemassa", Boolean(obj2.prop) );
    }else{
        console.log( "prop-property√§ ei ole olemassa", Boolean(obj2.prop) );
    }
}catch(err){
    console.log("Virhe: ", err.message);
}

//todisteena viel√§ truthy versio vertailusta (scopen sis√§ss√§ https://exploringjs.com/js/book/ch_variables-assignment.html#the-scope-of-a-variable)
{
    const obj = {
        prop:"kissa"
    };
    if (obj.prop !== undefined) {
        // obj has property .prop
        console.log( "prop-property on olemassa", Boolean(obj.prop) );
    }else{
        console.log( "prop-property√§ ei ole olemassa", Boolean(obj.prop) );
    }

    //Due to undefined being falsy, we can shorten this check to:
    if (obj.prop) {
        // obj has property .prop
        console.log( "prop-property on olemassa", Boolean(obj.prop) );
    }else{
        console.log( "prop-property√§ ei ole olemassa", Boolean(obj.prop) );
    }
}

//funktion parametri (onko olemassa)
//https://exploringjs.com/js/book/ch_booleans.html#use-case-was-a-parameter-provided
const jokuFunktio = (parametri) => {
    return Boolean(parametri);
}
console.log("ilman argumentteja: "+ jokuFunktio()); //ilman argumentteja
console.log("argumentin kera: " + jokuFunktio("kissa")); //argumentin kera

//in operaattori
//https://exploringjs.com/js/book/ch_objects.html#in-operator
//Varsinkin objektien kanssa ty√∂skennelless√§ in-operaattori voi olla k√§tev√§
const jokuObjekti = {
    merkki:"Volvo",
    malli:"Amazon"
}

//vertailu onnistuu perinteisesti n√§in
if( jokuObjekti.vuosimalli ){
    console.log("Vuosimalli on " + jokuObjekti.vuosimalli);
}else{
    console.log("Vuosimalli tieto puuttuu!");
}

//tai in-operaattoria k√§ytt√§m√§ll√§
if( 'vuosimalli' in jokuObjekti ){
    console.log("Vuosimalli on " + jokuObjekti.vuosimalli);
}else{
    console.log("Vuosimalli tieto puuttuu!");
}

//lis√§t√§√§n viel√§ vuosimalli objektiin ja testataan toimivaksi (eli pit√§isi menn√§ if-haaraan)
jokuObjekti['vuosimalli'] = 1960;
//tai jokuObjekti.vuosimalli = 1960;
if( 'vuosimalli' in jokuObjekti ){
    console.log("Vuosimalli on " + jokuObjekti.vuosimalli);
}else{
    console.log("Vuosimalli tieto puuttuu!");
}
//ja jos t√§ss√§ kohtaa ihmettelet miten const (constant) objektia voi muokata j√§lkik√§teen 
//tutustu tai kertaa
//https://github.com/GetSomefi/Kurssi_Javascript/blob/main/muuttujat/const_immutability.js

//nyt varmaan ternaryOperator k√§y paremmin j√§rkeen
//https://exploringjs.com/js/book/ch_booleans.html#conditional-operator
//https://github.com/GetSomefi/Kurssi_Javascript/blob/main/ternaryOperator

//Eli
// ehto ? jos : muuten
let vuosimalli = 'vuosimalli' in jokuObjekti ? jokuObjekti.vuosimalli : "Vuosimalli tieto puuttuu!";
console.log("Vuosimallin ternaryOperator testi: " + vuosimalli, jokuObjekti);

//ja jos tieto puuttuu
delete jokuObjekti.vuosimalli; //delete poistaa objektin j√§senen/ominaisuuden
vuosimalli = 'vuosimalli' in jokuObjekti ? jokuObjekti.vuosimalli : "Vuosimalli tieto puuttuu!";
console.log("Vuosimallin ternaryOperator testi: " + vuosimalli, jokuObjekti);